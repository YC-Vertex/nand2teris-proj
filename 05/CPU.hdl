// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = Ain);
    Not(in = instruction[15], out = inv);
    Or(a = inv, b = instruction[5], out = Aload);
    And(a = instruction[15], b = instruction[4], out = Dload);
    And(a = instruction[15], b = instruction[3], out = writeM);

    ARegister(in = Ain, load = Aload, out = Aout, out[0..14] = addressM);
    DRegister(in = Din, load = Dload, out = Dout);
    Mux16(a = Aout, b = inM, sel = instruction[12], out = MUXout);

    ALU(x = Dout, y = MUXout, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, out = outM, out = Din, zr = eq, ng = lt);
    
    Not(in = lt, out = ltinv);
    Not(in = eq, out = eqinv);
    And(a = ltinv, b = eqinv, out = gt);
    And(a = lt, b = instruction[2], out = lttrue);
    And(a = eq, b = instruction[1], out = eqtrue);
    And(a = gt, b = instruction[0], out = gttrue);
    Or(a = lttrue, b = gttrue, out = temp);
    Or(a = eqtrue, b = temp, out = load);
    And(a = load, b = instruction[15], out = PCload);
    PC(in = Aout, load = PCload, inc = true, reset = reset, out[0..14] = pc);
}
