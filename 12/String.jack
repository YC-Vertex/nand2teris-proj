// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field int strLen;
	field Array buffer;
	field int bufferLen;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		if (maxLength < 1) {
			let maxLength = 1;
		}
		let strLen = 0;
		let buffer = Array.new(maxLength);
		let bufferLen = maxLength;
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do Array.dispose(buffer);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return strLen;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		return buffer[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		let buffer[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {  //index of the array begin with zero, so that "strLen = 0" means buffer[0] is reliable;
		if (strLen < bufferLen) {
			let buffer[strLen] = c;
			let strLen = strLen + 1;
		}
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if (strLen > 0) {
			let strLen = strLen - 1;
		}
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int intVal;
		var int i;
		var boolean negFlag;
		let intVal = 0;
		if ((buffer[0] = 45) & (strLen > 0)) {
			let negFlag = true;
			let i = 1;
		}
		else {
			let negFlag = false;
			let i = 0;
		}
		while ((i < strLen) & (buffer[i] > 47) & (buffer[i] < 58)) {
			let intVal = intVal * 10 + (buffer[i] - 48);
			let i = i + 1;
		}
		if (negFlag) {
			return -intVal;
		}
		else {
			return intVal;
		}
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		var int c;
		var int charNum;
		var int res;
		
		let strLen = 0;
		if (number < 0){
			let number = -number;
			do appendChar(45);
		}
		
		if (number > 10){
			let res = number / 10;
			let charNum = number - (res * 10);
			let c = charNum + 48;
			do set_int(res);
			do appendChar(c);
		}
		else {
			let c = number + 48;
			do appendChar(c);
		}
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
	}
}
